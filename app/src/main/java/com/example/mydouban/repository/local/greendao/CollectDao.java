package com.example.mydouban.repository.local.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.mydouban.repository.local.entity.Collect;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COLLECT".
*/
public class CollectDao extends AbstractDao<Collect, Long> {

    public static final String TABLENAME = "COLLECT";

    /**
     * Properties of entity Collect.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "title");
        public final static Property Image = new Property(2, String.class, "image", false, "image");
        public final static Property Year = new Property(3, Integer.class, "year", false, "year");
        public final static Property Average = new Property(4, Float.class, "average", false, "average");
        public final static Property Country = new Property(5, String.class, "country", false, "country");
        public final static Property Genres = new Property(6, String.class, "genres", false, "genres");
        public final static Property Directors = new Property(7, String.class, "directors", false, "directors");
        public final static Property Casts = new Property(8, String.class, "casts", false, "casts");
        public final static Property CreateTime = new Property(9, String.class, "createTime", false, "createTime");
    }


    public CollectDao(DaoConfig config) {
        super(config);
    }
    
    public CollectDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COLLECT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"title\" TEXT," + // 1: title
                "\"image\" TEXT," + // 2: image
                "\"year\" INTEGER," + // 3: year
                "\"average\" REAL," + // 4: average
                "\"country\" TEXT," + // 5: country
                "\"genres\" TEXT," + // 6: genres
                "\"directors\" TEXT," + // 7: directors
                "\"casts\" TEXT," + // 8: casts
                "\"createTime\" TEXT);"); // 9: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COLLECT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Collect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(4, year);
        }
 
        Float average = entity.getAverage();
        if (average != null) {
            stmt.bindDouble(5, average);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(6, country);
        }
 
        String genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(7, genres);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(8, directors);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(9, casts);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Collect entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(3, image);
        }
 
        Integer year = entity.getYear();
        if (year != null) {
            stmt.bindLong(4, year);
        }
 
        Float average = entity.getAverage();
        if (average != null) {
            stmt.bindDouble(5, average);
        }
 
        String country = entity.getCountry();
        if (country != null) {
            stmt.bindString(6, country);
        }
 
        String genres = entity.getGenres();
        if (genres != null) {
            stmt.bindString(7, genres);
        }
 
        String directors = entity.getDirectors();
        if (directors != null) {
            stmt.bindString(8, directors);
        }
 
        String casts = entity.getCasts();
        if (casts != null) {
            stmt.bindString(9, casts);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(10, createTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Collect readEntity(Cursor cursor, int offset) {
        Collect entity = new Collect( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // image
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // year
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // average
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // country
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // genres
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // directors
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // casts
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // createTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Collect entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImage(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYear(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setAverage(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setCountry(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGenres(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDirectors(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCasts(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Collect entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Collect entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Collect entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
